{"remainingRequest":"D:\\Snnash\\client-frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\Snnash\\client-frontend\\node_modules\\webpack-dev-server\\client\\socket.js","dependencies":[{"path":"D:\\Snnash\\client-frontend\\node_modules\\webpack-dev-server\\client\\socket.js","mtime":1525296919000},{"path":"D:\\Snnash\\client-frontend\\.babelrc","mtime":1528721307992},{"path":"D:\\Snnash\\client-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\Snnash\\client-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nvar SockJS = require('sockjs-client/dist/sockjs');\n\nvar retries = 0;\nvar sock = null;\n\nvar socket = function initSocket(url, handlers) {\n  sock = new SockJS(url);\n\n  sock.onopen = function onopen() {\n    retries = 0;\n  };\n\n  sock.onclose = function onclose() {\n    if (retries === 0) {\n      handlers.close();\n    }\n\n    // Try to reconnect.\n    sock = null;\n\n    // After 10 retries stop trying, to prevent logspam.\n    if (retries <= 10) {\n      // Exponentially increase timeout to reconnect.\n      // Respectfully copied from the package `got`.\n      // eslint-disable-next-line no-mixed-operators, no-restricted-properties\n      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;\n      retries += 1;\n\n      setTimeout(function () {\n        socket(url, handlers);\n      }, retryInMs);\n    }\n  };\n\n  sock.onmessage = function onmessage(e) {\n    // This assumes that all data sent via the websocket is JSON.\n    var msg = JSON.parse(e.data);\n    if (handlers[msg.type]) {\n      handlers[msg.type](msg.data);\n    }\n  };\n};\n\nmodule.exports = socket;",{"version":3,"sources":["node_modules\\webpack-dev-server\\client\\socket.js"],"names":["SockJS","require","retries","sock","socket","initSocket","url","handlers","onopen","onclose","close","retryInMs","Math","pow","random","setTimeout","onmessage","e","msg","JSON","parse","data","type","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAASC,QAAQ,2BAAR,CAAb;;AAEA,IAAIC,UAAU,CAAd;AACA,IAAIC,OAAO,IAAX;;AAEA,IAAIC,SAAS,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,QAAzB,EAAmC;AAC9CJ,SAAO,IAAIH,MAAJ,CAAWM,GAAX,CAAP;;AAEAH,OAAKK,MAAL,GAAc,SAASA,MAAT,GAAkB;AAC9BN,cAAU,CAAV;AACD,GAFD;;AAIAC,OAAKM,OAAL,GAAe,SAASA,OAAT,GAAmB;AAChC,QAAIP,YAAY,CAAhB,EAAmB;AACjBK,eAASG,KAAT;AACD;;AAED;AACAP,WAAO,IAAP;;AAEA;AACA,QAAID,WAAW,EAAf,EAAmB;AACjB;AACA;AACA;AACA,UAAIS,YAAY,OAAOC,KAAKC,GAAL,CAAS,CAAT,EAAYX,OAAZ,CAAP,GAA8BU,KAAKE,MAAL,KAAgB,GAA9D;AACAZ,iBAAW,CAAX;;AAEAa,iBAAW,YAAY;AACrBX,eAAOE,GAAP,EAAYC,QAAZ;AACD,OAFD,EAEGI,SAFH;AAGD;AACF,GApBD;;AAsBAR,OAAKa,SAAL,GAAiB,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AACrC;AACA,QAAIC,MAAMC,KAAKC,KAAL,CAAWH,EAAEI,IAAb,CAAV;AACA,QAAId,SAASW,IAAII,IAAb,CAAJ,EAAwB;AACtBf,eAASW,IAAII,IAAb,EAAmBJ,IAAIG,IAAvB;AACD;AACF,GAND;AAOD,CApCD;;AAsCAE,OAAOC,OAAP,GAAiBpB,MAAjB","file":"socket.js","sourceRoot":"D:/Snnash/client-frontend","sourcesContent":["'use strict';\n\nvar SockJS = require('sockjs-client/dist/sockjs');\n\nvar retries = 0;\nvar sock = null;\n\nvar socket = function initSocket(url, handlers) {\n  sock = new SockJS(url);\n\n  sock.onopen = function onopen() {\n    retries = 0;\n  };\n\n  sock.onclose = function onclose() {\n    if (retries === 0) {\n      handlers.close();\n    }\n\n    // Try to reconnect.\n    sock = null;\n\n    // After 10 retries stop trying, to prevent logspam.\n    if (retries <= 10) {\n      // Exponentially increase timeout to reconnect.\n      // Respectfully copied from the package `got`.\n      // eslint-disable-next-line no-mixed-operators, no-restricted-properties\n      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;\n      retries += 1;\n\n      setTimeout(function () {\n        socket(url, handlers);\n      }, retryInMs);\n    }\n  };\n\n  sock.onmessage = function onmessage(e) {\n    // This assumes that all data sent via the websocket is JSON.\n    var msg = JSON.parse(e.data);\n    if (handlers[msg.type]) {\n      handlers[msg.type](msg.data);\n    }\n  };\n};\n\nmodule.exports = socket;"]}]}