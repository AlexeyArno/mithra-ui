{"remainingRequest":"D:\\Snnash\\client-frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\Snnash\\client-frontend\\node_modules\\webpack\\hot\\log.js","dependencies":[{"path":"D:\\Snnash\\client-frontend\\node_modules\\webpack\\hot\\log.js","mtime":1526545551000},{"path":"D:\\Snnash\\client-frontend\\.babelrc","mtime":1528721307992},{"path":"D:\\Snnash\\client-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\Snnash\\client-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar logLevel = \"info\";\n\nfunction dummy() {}\n\nfunction shouldLog(level) {\n\tvar shouldLog = logLevel === \"info\" && level === \"info\" || [\"info\", \"warning\"].indexOf(logLevel) >= 0 && level === \"warning\" || [\"info\", \"warning\", \"error\"].indexOf(logLevel) >= 0 && level === \"error\";\n\treturn shouldLog;\n}\n\nfunction logGroup(logFn) {\n\treturn function (level, msg) {\n\t\tif (shouldLog(level)) {\n\t\t\tlogFn(msg);\n\t\t}\n\t};\n}\n\nmodule.exports = function (level, msg) {\n\tif (shouldLog(level)) {\n\t\tif (level === \"info\") {\n\t\t\tconsole.log(msg);\n\t\t} else if (level === \"warning\") {\n\t\t\tconsole.warn(msg);\n\t\t} else if (level === \"error\") {\n\t\t\tconsole.error(msg);\n\t\t}\n\t}\n};\n\nvar group = console.group || dummy;\nvar groupCollapsed = console.groupCollapsed || dummy;\nvar groupEnd = console.groupEnd || dummy;\n\nmodule.exports.group = logGroup(group);\n\nmodule.exports.groupCollapsed = logGroup(groupCollapsed);\n\nmodule.exports.groupEnd = logGroup(groupEnd);\n\nmodule.exports.setLogLevel = function (level) {\n\tlogLevel = level;\n};",{"version":3,"sources":["node_modules\\webpack\\hot\\log.js"],"names":["logLevel","dummy","shouldLog","level","indexOf","logGroup","logFn","msg","module","exports","console","log","warn","error","group","groupCollapsed","groupEnd","setLogLevel"],"mappings":";;AAAA,IAAIA,WAAW,MAAf;;AAEA,SAASC,KAAT,GAAiB,CAAE;;AAEnB,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACzB,KAAID,YACFF,aAAa,MAAb,IAAuBG,UAAU,MAAlC,IACC,CAAC,MAAD,EAAS,SAAT,EAAoBC,OAApB,CAA4BJ,QAA5B,KAAyC,CAAzC,IAA8CG,UAAU,SADzD,IAEC,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,EAA6BC,OAA7B,CAAqCJ,QAArC,KAAkD,CAAlD,IAAuDG,UAAU,OAHnE;AAIA,QAAOD,SAAP;AACA;;AAED,SAASG,QAAT,CAAkBC,KAAlB,EAAyB;AACxB,QAAO,UAASH,KAAT,EAAgBI,GAAhB,EAAqB;AAC3B,MAAIL,UAAUC,KAAV,CAAJ,EAAsB;AACrBG,SAAMC,GAAN;AACA;AACD,EAJD;AAKA;;AAEDC,OAAOC,OAAP,GAAiB,UAASN,KAAT,EAAgBI,GAAhB,EAAqB;AACrC,KAAIL,UAAUC,KAAV,CAAJ,EAAsB;AACrB,MAAIA,UAAU,MAAd,EAAsB;AACrBO,WAAQC,GAAR,CAAYJ,GAAZ;AACA,GAFD,MAEO,IAAIJ,UAAU,SAAd,EAAyB;AAC/BO,WAAQE,IAAR,CAAaL,GAAb;AACA,GAFM,MAEA,IAAIJ,UAAU,OAAd,EAAuB;AAC7BO,WAAQG,KAAR,CAAcN,GAAd;AACA;AACD;AACD,CAVD;;AAYA,IAAIO,QAAQJ,QAAQI,KAAR,IAAiBb,KAA7B;AACA,IAAIc,iBAAiBL,QAAQK,cAAR,IAA0Bd,KAA/C;AACA,IAAIe,WAAWN,QAAQM,QAAR,IAAoBf,KAAnC;;AAEAO,OAAOC,OAAP,CAAeK,KAAf,GAAuBT,SAASS,KAAT,CAAvB;;AAEAN,OAAOC,OAAP,CAAeM,cAAf,GAAgCV,SAASU,cAAT,CAAhC;;AAEAP,OAAOC,OAAP,CAAeO,QAAf,GAA0BX,SAASW,QAAT,CAA1B;;AAEAR,OAAOC,OAAP,CAAeQ,WAAf,GAA6B,UAASd,KAAT,EAAgB;AAC5CH,YAAWG,KAAX;AACA,CAFD","file":"log.js","sourceRoot":"D:/Snnash/client-frontend","sourcesContent":["var logLevel = \"info\";\n\nfunction dummy() {}\n\nfunction shouldLog(level) {\n\tvar shouldLog =\n\t\t(logLevel === \"info\" && level === \"info\") ||\n\t\t([\"info\", \"warning\"].indexOf(logLevel) >= 0 && level === \"warning\") ||\n\t\t([\"info\", \"warning\", \"error\"].indexOf(logLevel) >= 0 && level === \"error\");\n\treturn shouldLog;\n}\n\nfunction logGroup(logFn) {\n\treturn function(level, msg) {\n\t\tif (shouldLog(level)) {\n\t\t\tlogFn(msg);\n\t\t}\n\t};\n}\n\nmodule.exports = function(level, msg) {\n\tif (shouldLog(level)) {\n\t\tif (level === \"info\") {\n\t\t\tconsole.log(msg);\n\t\t} else if (level === \"warning\") {\n\t\t\tconsole.warn(msg);\n\t\t} else if (level === \"error\") {\n\t\t\tconsole.error(msg);\n\t\t}\n\t}\n};\n\nvar group = console.group || dummy;\nvar groupCollapsed = console.groupCollapsed || dummy;\nvar groupEnd = console.groupEnd || dummy;\n\nmodule.exports.group = logGroup(group);\n\nmodule.exports.groupCollapsed = logGroup(groupCollapsed);\n\nmodule.exports.groupEnd = logGroup(groupEnd);\n\nmodule.exports.setLogLevel = function(level) {\n\tlogLevel = level;\n};\n"]}]}