{"remainingRequest":"D:\\Snnash\\client-frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\Snnash\\client-frontend\\node_modules\\lodash-es\\_getRawTag.js","dependencies":[{"path":"D:\\Snnash\\client-frontend\\node_modules\\lodash-es\\_getRawTag.js","mtime":499162500000},{"path":"D:\\Snnash\\client-frontend\\.babelrc","mtime":1528721307992},{"path":"D:\\Snnash\\client-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\Snnash\\client-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Symbol2 = require('./_Symbol.js');\n\nvar _Symbol3 = _interopRequireDefault(_Symbol2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = _Symbol3.default ? _Symbol3.default.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexports.default = getRawTag;",{"version":3,"sources":["node_modules\\lodash-es\\_getRawTag.js"],"names":["objectProto","Object","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag","Symbol","toStringTag","undefined","getRawTag","value","isOwn","call","tag","unmasked","e","result"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACA,IAAIA,cAAcC,OAAOC,SAAzB;;AAEA;AACA,IAAIC,iBAAiBH,YAAYG,cAAjC;;AAEA;;;;;AAKA,IAAIC,uBAAuBJ,YAAYK,QAAvC;;AAEA;AACA,IAAIC,iBAAiBC,mBAASA,iBAAOC,WAAhB,GAA8BC,SAAnD;;AAEA;;;;;;;AAOA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAIC,QAAQT,eAAeU,IAAf,CAAoBF,KAApB,EAA2BL,cAA3B,CAAZ;AAAA,MACIQ,MAAMH,MAAML,cAAN,CADV;;AAGA,MAAI;AACFK,UAAML,cAAN,IAAwBG,SAAxB;AACA,QAAIM,WAAW,IAAf;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU,CAAE;;AAEd,MAAIC,SAASb,qBAAqBS,IAArB,CAA0BF,KAA1B,CAAb;AACA,MAAII,QAAJ,EAAc;AACZ,QAAIH,KAAJ,EAAW;AACTD,YAAML,cAAN,IAAwBQ,GAAxB;AACD,KAFD,MAEO;AACL,aAAOH,MAAML,cAAN,CAAP;AACD;AACF;AACD,SAAOW,MAAP;AACD;;kBAEcP,S","file":"_getRawTag.js","sourceRoot":"D:/Snnash/client-frontend","sourcesContent":["import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n"]}]}