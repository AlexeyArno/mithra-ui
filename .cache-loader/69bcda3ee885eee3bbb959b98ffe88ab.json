{"remainingRequest":"D:\\Snnash\\client-frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\Snnash\\client-frontend\\node_modules\\webpack-dev-server\\client\\index.js?http://localhost:8080","dependencies":[{"path":"D:\\Snnash\\client-frontend\\node_modules\\webpack-dev-server\\client\\index.js","mtime":1525296919000},{"path":"D:\\Snnash\\client-frontend\\.babelrc","mtime":1528721307992},{"path":"D:\\Snnash\\client-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\Snnash\\client-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\n/* global __resourceQuery WorkerGlobalScope self */\n/* eslint prefer-destructuring: off */\n\nvar url = require('url');\nvar stripAnsi = require('strip-ansi');\nvar log = require('loglevel').getLogger('webpack-dev-server');\nvar socket = require('./socket');\nvar overlay = require('./overlay');\n\nfunction getCurrentScriptSource() {\n  // `document.currentScript` is the most accurate way to find the current script,\n  // but is not supported in all browsers.\n  if (document.currentScript) {\n    return document.currentScript.getAttribute('src');\n  }\n  // Fall back to getting all scripts in the document.\n  var scriptElements = document.scripts || [];\n  var currentScript = scriptElements[scriptElements.length - 1];\n  if (currentScript) {\n    return currentScript.getAttribute('src');\n  }\n  // Fail as there was no script to use.\n  throw new Error('[WDS] Failed to get current script source.');\n}\n\nvar urlParts = void 0;\nvar hotReload = true;\nif (typeof window !== 'undefined') {\n  var qs = window.location.search.toLowerCase();\n  hotReload = qs.indexOf('hotreload=false') === -1;\n}\nif (typeof __resourceQuery === 'string' && __resourceQuery) {\n  // If this bundle is inlined, use the resource query to get the correct url.\n  urlParts = url.parse(__resourceQuery.substr(1));\n} else {\n  // Else, get the url from the <script> this file was called with.\n  var scriptHost = getCurrentScriptSource();\n  // eslint-disable-next-line no-useless-escape\n  scriptHost = scriptHost.replace(/\\/[^\\/]+$/, '');\n  urlParts = url.parse(scriptHost || '/', false, true);\n}\n\nif (!urlParts.port || urlParts.port === '0') {\n  urlParts.port = self.location.port;\n}\n\nvar _hot = false;\nvar initial = true;\nvar currentHash = '';\nvar useWarningOverlay = false;\nvar useErrorOverlay = false;\nvar useProgress = false;\n\nvar INFO = 'info';\nvar WARNING = 'warning';\nvar ERROR = 'error';\nvar NONE = 'none';\n\n// Set the default log level\nlog.setDefaultLevel(INFO);\n\n// Send messages to the outside, so plugins can consume it.\nfunction sendMsg(type, data) {\n  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {\n    self.postMessage({\n      type: 'webpack' + type,\n      data: data\n    }, '*');\n  }\n}\n\nvar onSocketMsg = {\n  hot: function hot() {\n    _hot = true;\n    log.info('[WDS] Hot Module Replacement enabled.');\n  },\n  invalid: function invalid() {\n    log.info('[WDS] App updated. Recompiling...');\n    // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('Invalid');\n  },\n  hash: function hash(_hash) {\n    currentHash = _hash;\n  },\n\n  'still-ok': function stillOk() {\n    log.info('[WDS] Nothing changed.');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('StillOk');\n  },\n  'log-level': function logLevel(level) {\n    var hotCtx = require.context('webpack/hot', false, /^\\.\\/log$/);\n    if (hotCtx.keys().indexOf('./log') !== -1) {\n      hotCtx('./log').setLogLevel(level);\n    }\n    switch (level) {\n      case INFO:\n      case ERROR:\n        log.setLevel(level);\n        break;\n      case WARNING:\n        // loglevel's warning name is different from webpack's\n        log.setLevel('warn');\n        break;\n      case NONE:\n        log.disableAll();\n        break;\n      default:\n        log.error('[WDS] Unknown clientLogLevel \\'' + level + '\\'');\n    }\n  },\n  overlay: function overlay(value) {\n    if (typeof document !== 'undefined') {\n      if (typeof value === 'boolean') {\n        useWarningOverlay = false;\n        useErrorOverlay = value;\n      } else if (value) {\n        useWarningOverlay = value.warnings;\n        useErrorOverlay = value.errors;\n      }\n    }\n  },\n  progress: function progress(_progress) {\n    if (typeof document !== 'undefined') {\n      useProgress = _progress;\n    }\n  },\n\n  'progress-update': function progressUpdate(data) {\n    if (useProgress) log.info('[WDS] ' + data.percent + '% - ' + data.msg + '.');\n  },\n  ok: function ok() {\n    sendMsg('Ok');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n    reloadApp();\n  },\n\n  'content-changed': function contentChanged() {\n    log.info('[WDS] Content base changed. Reloading...');\n    self.location.reload();\n  },\n  warnings: function warnings(_warnings) {\n    log.warn('[WDS] Warnings while compiling.');\n    var strippedWarnings = _warnings.map(function (warning) {\n      return stripAnsi(warning);\n    });\n    sendMsg('Warnings', strippedWarnings);\n    for (var i = 0; i < strippedWarnings.length; i++) {\n      log.warn(strippedWarnings[i]);\n    }\n    if (useWarningOverlay) overlay.showMessage(_warnings);\n\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n    reloadApp();\n  },\n  errors: function errors(_errors) {\n    log.error('[WDS] Errors while compiling. Reload prevented.');\n    var strippedErrors = _errors.map(function (error) {\n      return stripAnsi(error);\n    });\n    sendMsg('Errors', strippedErrors);\n    for (var i = 0; i < strippedErrors.length; i++) {\n      log.error(strippedErrors[i]);\n    }\n    if (useErrorOverlay) overlay.showMessage(_errors);\n    initial = false;\n  },\n  error: function error(_error) {\n    log.error(_error);\n  },\n  close: function close() {\n    log.error('[WDS] Disconnected!');\n    sendMsg('Close');\n  }\n};\n\nvar hostname = urlParts.hostname;\nvar protocol = urlParts.protocol;\n\n// check ipv4 and ipv6 `all hostname`\nif (hostname === '0.0.0.0' || hostname === '::') {\n  // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n  // eslint-disable-next-line no-bitwise\n  if (self.location.hostname && !!~self.location.protocol.indexOf('http')) {\n    hostname = self.location.hostname;\n  }\n}\n\n// `hostname` can be empty when the script path is relative. In that case, specifying\n// a protocol would result in an invalid URL.\n// When https is used in the app, secure websockets are always necessary\n// because the browser doesn't accept non-secure websockets.\nif (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {\n  protocol = self.location.protocol;\n}\n\nvar socketUrl = url.format({\n  protocol: protocol,\n  auth: urlParts.auth,\n  hostname: hostname,\n  port: urlParts.port,\n  pathname: urlParts.path == null || urlParts.path === '/' ? '/sockjs-node' : urlParts.path\n});\n\nsocket(socketUrl, onSocketMsg);\n\nvar isUnloading = false;\nself.addEventListener('beforeunload', function () {\n  isUnloading = true;\n});\n\nfunction reloadApp() {\n  if (isUnloading || !hotReload) {\n    return;\n  }\n  if (_hot) {\n    log.info('[WDS] App hot update...');\n    // eslint-disable-next-line global-require\n    var hotEmitter = require('webpack/hot/emitter');\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n    if (typeof self !== 'undefined' && self.window) {\n      // broadcast update to window\n      self.postMessage('webpackHotUpdate' + currentHash, '*');\n    }\n  } else {\n    var rootWindow = self;\n    // use parent window for reload (in case we're in an iframe with no valid src)\n    var intervalId = self.setInterval(function () {\n      if (rootWindow.location.protocol !== 'about:') {\n        // reload immediately if protocol is valid\n        applyReload(rootWindow, intervalId);\n      } else {\n        rootWindow = rootWindow.parent;\n        if (rootWindow.parent === rootWindow) {\n          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n          applyReload(rootWindow, intervalId);\n        }\n      }\n    });\n  }\n\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    log.info('[WDS] App updated. Reloading...');\n    rootWindow.location.reload();\n  }\n}",{"version":3,"sources":["node_modules\\webpack-dev-server\\client\\index.js"],"names":["url","require","stripAnsi","log","getLogger","socket","overlay","getCurrentScriptSource","document","currentScript","getAttribute","scriptElements","scripts","length","Error","urlParts","hotReload","window","qs","location","search","toLowerCase","indexOf","__resourceQuery","parse","substr","scriptHost","replace","port","self","_hot","initial","currentHash","useWarningOverlay","useErrorOverlay","useProgress","INFO","WARNING","ERROR","NONE","setDefaultLevel","sendMsg","type","data","WorkerGlobalScope","postMessage","onSocketMsg","hot","info","invalid","clear","hash","_hash","stillOk","logLevel","level","hotCtx","context","keys","setLogLevel","setLevel","disableAll","error","value","warnings","errors","progress","_progress","progressUpdate","percent","msg","ok","reloadApp","contentChanged","reload","_warnings","warn","strippedWarnings","map","warning","i","showMessage","_errors","strippedErrors","_error","close","hostname","protocol","socketUrl","format","auth","pathname","path","isUnloading","addEventListener","hotEmitter","emit","rootWindow","intervalId","setInterval","applyReload","parent","clearInterval"],"mappings":"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","file":"index.js","sourceRoot":"D:/Snnash/client-frontend","sourcesContent":["'use strict';\n\n/* global __resourceQuery WorkerGlobalScope self */\n/* eslint prefer-destructuring: off */\n\nvar url = require('url');\nvar stripAnsi = require('strip-ansi');\nvar log = require('loglevel').getLogger('webpack-dev-server');\nvar socket = require('./socket');\nvar overlay = require('./overlay');\n\nfunction getCurrentScriptSource() {\n  // `document.currentScript` is the most accurate way to find the current script,\n  // but is not supported in all browsers.\n  if (document.currentScript) {\n    return document.currentScript.getAttribute('src');\n  }\n  // Fall back to getting all scripts in the document.\n  var scriptElements = document.scripts || [];\n  var currentScript = scriptElements[scriptElements.length - 1];\n  if (currentScript) {\n    return currentScript.getAttribute('src');\n  }\n  // Fail as there was no script to use.\n  throw new Error('[WDS] Failed to get current script source.');\n}\n\nvar urlParts = void 0;\nvar hotReload = true;\nif (typeof window !== 'undefined') {\n  var qs = window.location.search.toLowerCase();\n  hotReload = qs.indexOf('hotreload=false') === -1;\n}\nif (typeof __resourceQuery === 'string' && __resourceQuery) {\n  // If this bundle is inlined, use the resource query to get the correct url.\n  urlParts = url.parse(__resourceQuery.substr(1));\n} else {\n  // Else, get the url from the <script> this file was called with.\n  var scriptHost = getCurrentScriptSource();\n  // eslint-disable-next-line no-useless-escape\n  scriptHost = scriptHost.replace(/\\/[^\\/]+$/, '');\n  urlParts = url.parse(scriptHost || '/', false, true);\n}\n\nif (!urlParts.port || urlParts.port === '0') {\n  urlParts.port = self.location.port;\n}\n\nvar _hot = false;\nvar initial = true;\nvar currentHash = '';\nvar useWarningOverlay = false;\nvar useErrorOverlay = false;\nvar useProgress = false;\n\nvar INFO = 'info';\nvar WARNING = 'warning';\nvar ERROR = 'error';\nvar NONE = 'none';\n\n// Set the default log level\nlog.setDefaultLevel(INFO);\n\n// Send messages to the outside, so plugins can consume it.\nfunction sendMsg(type, data) {\n  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {\n    self.postMessage({\n      type: 'webpack' + type,\n      data: data\n    }, '*');\n  }\n}\n\nvar onSocketMsg = {\n  hot: function hot() {\n    _hot = true;\n    log.info('[WDS] Hot Module Replacement enabled.');\n  },\n  invalid: function invalid() {\n    log.info('[WDS] App updated. Recompiling...');\n    // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('Invalid');\n  },\n  hash: function hash(_hash) {\n    currentHash = _hash;\n  },\n\n  'still-ok': function stillOk() {\n    log.info('[WDS] Nothing changed.');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    sendMsg('StillOk');\n  },\n  'log-level': function logLevel(level) {\n    var hotCtx = require.context('webpack/hot', false, /^\\.\\/log$/);\n    if (hotCtx.keys().indexOf('./log') !== -1) {\n      hotCtx('./log').setLogLevel(level);\n    }\n    switch (level) {\n      case INFO:\n      case ERROR:\n        log.setLevel(level);\n        break;\n      case WARNING:\n        // loglevel's warning name is different from webpack's\n        log.setLevel('warn');\n        break;\n      case NONE:\n        log.disableAll();\n        break;\n      default:\n        log.error('[WDS] Unknown clientLogLevel \\'' + level + '\\'');\n    }\n  },\n  overlay: function overlay(value) {\n    if (typeof document !== 'undefined') {\n      if (typeof value === 'boolean') {\n        useWarningOverlay = false;\n        useErrorOverlay = value;\n      } else if (value) {\n        useWarningOverlay = value.warnings;\n        useErrorOverlay = value.errors;\n      }\n    }\n  },\n  progress: function progress(_progress) {\n    if (typeof document !== 'undefined') {\n      useProgress = _progress;\n    }\n  },\n\n  'progress-update': function progressUpdate(data) {\n    if (useProgress) log.info('[WDS] ' + data.percent + '% - ' + data.msg + '.');\n  },\n  ok: function ok() {\n    sendMsg('Ok');\n    if (useWarningOverlay || useErrorOverlay) overlay.clear();\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n    reloadApp();\n  },\n\n  'content-changed': function contentChanged() {\n    log.info('[WDS] Content base changed. Reloading...');\n    self.location.reload();\n  },\n  warnings: function warnings(_warnings) {\n    log.warn('[WDS] Warnings while compiling.');\n    var strippedWarnings = _warnings.map(function (warning) {\n      return stripAnsi(warning);\n    });\n    sendMsg('Warnings', strippedWarnings);\n    for (var i = 0; i < strippedWarnings.length; i++) {\n      log.warn(strippedWarnings[i]);\n    }\n    if (useWarningOverlay) overlay.showMessage(_warnings);\n\n    if (initial) return initial = false; // eslint-disable-line no-return-assign\n    reloadApp();\n  },\n  errors: function errors(_errors) {\n    log.error('[WDS] Errors while compiling. Reload prevented.');\n    var strippedErrors = _errors.map(function (error) {\n      return stripAnsi(error);\n    });\n    sendMsg('Errors', strippedErrors);\n    for (var i = 0; i < strippedErrors.length; i++) {\n      log.error(strippedErrors[i]);\n    }\n    if (useErrorOverlay) overlay.showMessage(_errors);\n    initial = false;\n  },\n  error: function error(_error) {\n    log.error(_error);\n  },\n  close: function close() {\n    log.error('[WDS] Disconnected!');\n    sendMsg('Close');\n  }\n};\n\nvar hostname = urlParts.hostname;\nvar protocol = urlParts.protocol;\n\n// check ipv4 and ipv6 `all hostname`\nif (hostname === '0.0.0.0' || hostname === '::') {\n  // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n  // eslint-disable-next-line no-bitwise\n  if (self.location.hostname && !!~self.location.protocol.indexOf('http')) {\n    hostname = self.location.hostname;\n  }\n}\n\n// `hostname` can be empty when the script path is relative. In that case, specifying\n// a protocol would result in an invalid URL.\n// When https is used in the app, secure websockets are always necessary\n// because the browser doesn't accept non-secure websockets.\nif (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {\n  protocol = self.location.protocol;\n}\n\nvar socketUrl = url.format({\n  protocol: protocol,\n  auth: urlParts.auth,\n  hostname: hostname,\n  port: urlParts.port,\n  pathname: urlParts.path == null || urlParts.path === '/' ? '/sockjs-node' : urlParts.path\n});\n\nsocket(socketUrl, onSocketMsg);\n\nvar isUnloading = false;\nself.addEventListener('beforeunload', function () {\n  isUnloading = true;\n});\n\nfunction reloadApp() {\n  if (isUnloading || !hotReload) {\n    return;\n  }\n  if (_hot) {\n    log.info('[WDS] App hot update...');\n    // eslint-disable-next-line global-require\n    var hotEmitter = require('webpack/hot/emitter');\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n    if (typeof self !== 'undefined' && self.window) {\n      // broadcast update to window\n      self.postMessage('webpackHotUpdate' + currentHash, '*');\n    }\n  } else {\n    var rootWindow = self;\n    // use parent window for reload (in case we're in an iframe with no valid src)\n    var intervalId = self.setInterval(function () {\n      if (rootWindow.location.protocol !== 'about:') {\n        // reload immediately if protocol is valid\n        applyReload(rootWindow, intervalId);\n      } else {\n        rootWindow = rootWindow.parent;\n        if (rootWindow.parent === rootWindow) {\n          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n          applyReload(rootWindow, intervalId);\n        }\n      }\n    });\n  }\n\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    log.info('[WDS] App updated. Reloading...');\n    rootWindow.location.reload();\n  }\n}"]}]}