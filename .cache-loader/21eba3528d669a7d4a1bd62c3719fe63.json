{"remainingRequest":"D:\\Snnash\\client-frontend\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\Snnash\\client-frontend\\src\\actions\\refresh-widgets.ts","dependencies":[{"path":"D:\\Snnash\\client-frontend\\src\\actions\\refresh-widgets.ts","mtime":1529058503681},{"path":"D:\\Snnash\\client-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"D:\\Snnash\\client-frontend\\node_modules\\ts-loader\\index.js","mtime":1528433923000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst action_types_1 = require(\"./action-types\");\r\nconst widget_1 = require(\"../models/widget\");\r\nconst createRefreshWidgetsRequstAction = () => ({\r\n    type: action_types_1.actionTypes.REFRESH_WIDGETS_REQUEST,\r\n    widgets: []\r\n});\r\nconst createRefreshWidgetsDoneAction = (widgets) => ({\r\n    type: action_types_1.actionTypes.REFRESH_WIDGETS_DONE,\r\n    widgets\r\n});\r\nexports.refreshWidgets = () => {\r\n    return (dispatch, getState) => {\r\n        dispatch(createRefreshWidgetsRequstAction());\r\n        let promise = new Promise(resolve => setTimeout(resolve, 3000));\r\n        promise.then(() => {\r\n            let wids = [];\r\n            for (let i = 0; i < 10; i++) {\r\n                let wid = new widget_1.Widget();\r\n                wid.size = i;\r\n                wids.push(wid);\r\n            }\r\n            dispatch(createRefreshWidgetsDoneAction(wids));\r\n        });\r\n    };\r\n};\r\n",{"version":3,"file":"D:\\Snnash\\client-frontend\\src\\actions\\refresh-widgets.ts","sourceRoot":"","sources":["D:\\Snnash\\client-frontend\\src\\actions\\refresh-widgets.ts"],"names":[],"mappings":";;AAEA,iDAA2C;AAC3C,6CAAwC;AAMxC,MAAM,gCAAgC,GACtC,GAAG,EAAE,CAAC,CAAC;IACL,IAAI,EAAC,0BAAW,CAAC,uBAAuB;IACxC,OAAO,EAAC,EAAE;CACX,CAAC,CAAA;AAEF,MAAM,8BAA8B,GACpC,CAAC,OAAiB,EAAC,EAAE,CAAA,CAAC;IACpB,IAAI,EAAC,0BAAW,CAAC,oBAAoB;IACrC,OAAO;CACR,CAAC,CAAA;AAEW,QAAA,cAAc,GAAC,GAAE,EAAE;IAC9B,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAC,EAAE;QAC3B,QAAQ,CAAC,gCAAgC,EAAE,CAAC,CAAC;QAC7C,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,OAAO,CAAA,EAAE,CAAA,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAA;QAC7D,OAAO,CAAC,IAAI,CAAC,GAAE,EAAE;YACb,IAAI,IAAI,GAAiB,EAAE,CAAA;YAC3B,KAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,EAAE,EAAC,CAAC,EAAE,EAAC;gBACnB,IAAI,GAAG,GAAG,IAAI,eAAM,EAAE,CAAA;gBACtB,GAAG,CAAC,IAAI,GAAG,CAAC,CAAA;gBACZ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aACf;YACD,QAAQ,CAAC,8BAA8B,CAAC,IAAI,CAAC,CAAC,CAAC;QACjD,CAAC,CACF,CAAA;IACH,CAAC,CAAA;AACH,CAAC,CAAA","sourcesContent":["import {Action} from \"redux\"\r\n\r\nimport {actionTypes} from './action-types';\r\nimport {Widget} from '../models/widget';\r\n\r\nexport interface WidgetAction extends Action{\r\n  widgets: Widget[];\r\n}\r\n\r\nconst createRefreshWidgetsRequstAction:()=> WidgetAction =\r\n() => ({\r\n  type:actionTypes.REFRESH_WIDGETS_REQUEST,\r\n  widgets:[]\r\n})\r\n\r\nconst createRefreshWidgetsDoneAction:(widgets: Array<Widget>) => WidgetAction =\r\n(widgets: Widget[])=>({\r\n  type:actionTypes.REFRESH_WIDGETS_DONE,\r\n  widgets\r\n})\r\n\r\nexport const refreshWidgets=()=>{\r\n  return (dispatch, getState)=>{\r\n    dispatch(createRefreshWidgetsRequstAction());\r\n    let promise = new Promise(resolve=>setTimeout(resolve, 3000))\r\n    promise.then(()=>{\r\n        let wids:Array<Widget> = []\r\n        for(let i=0;i<10;i++){\r\n          let wid = new Widget()\r\n          wid.size = i\r\n          wids.push(wid)\r\n        }\r\n        dispatch(createRefreshWidgetsDoneAction(wids));\r\n      }\r\n    )\r\n  }\r\n}\r\n"]}]}